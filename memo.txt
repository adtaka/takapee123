
Access VBAで、先頭フィールドのデータ型を判定するには、DAO.FieldオブジェクトのTypeプロパティを使用します。このプロパティは、そのフィールドのデータ型を示す値を返します。返されるデータ型は、Accessで定義されている定数を使用して表現されます。

先頭項目のデータ型を取得する例
vba
コードをコピーする
Dim db As DAO.Database
Dim tdf As DAO.TableDef
Dim fld As DAO.Field
Dim tableName As String
Dim firstFieldType As Integer

tableName = "テーブル名" ' テーブル名を指定

' データベースを参照
Set db = CurrentDb

' テーブル定義を取得
Set tdf = db.TableDefs(tableName)

' 最初のフィールドのデータ型を取得
firstFieldType = tdf.Fields(0).Type

' データ型を判定し、メッセージボックスに表示
Select Case firstFieldType
    Case dbText
        MsgBox "先頭項目のデータ型は: テキスト型"
    Case dbInteger
        MsgBox "先頭項目のデータ型は: 整数型"
    Case dbLong
        MsgBox "先頭項目のデータ型は: ロング整数型"
    Case dbBoolean
        MsgBox "先頭項目のデータ型は: ブール型"
    Case dbDate
        MsgBox "先頭項目のデータ型は: 日付型"
    Case dbCurrency
        MsgBox "先頭項目のデータ型は: 通貨型"
    ' その他のデータ型もここで追加できます
    Case Else
        MsgBox "先頭項目のデータ型は: 不明"
End Select

' オブジェクトの解放
Set tdf = Nothing
Set db = Nothing


Sub UpdateFieldToNull()
    Dim db As DAO.Database
    Dim sql As String

    ' データベースの参照を取得
    Set db = CurrentDb

    ' UPDATE クエリで NULL を設定
    sql = "UPDATE YourTableName SET YourFieldName = NULL WHERE ConditionField = 'SomeCondition'"

    ' SQL クエリを実行
    db.Execute sql

    ' メッセージ表示（オプション）
    MsgBox "フィールドが NULL に更新されました"

    ' データベースオブジェクトの解放
    Set db = Nothing
End Sub

Sub WriteToSpecificLine()
    Dim fso As Object
    Dim filePath As String
    Dim file As Object
    Dim fileContent As String
    Dim lines() As String
    Dim i As Integer
    Dim targetLine As Integer
    Dim newText As String
    
    ' FileSystemObjectを作成
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' ファイルパスを指定
    filePath = "C:\path\to\your\file.txt"
    
    ' 読み込みたい行番号と書き込みたいテキスト
    targetLine = 3  ' 例：3行目を書き換える
    newText = "This is the new content for line 3"
    
    ' ファイルを開いて全内容を読み込む
    Set file = fso.OpenTextFile(filePath, 1)  ' 読み込みモード
    fileContent = file.ReadAll
    file.Close
    
    ' 内容を行ごとに分割して配列に格納
    lines = Split(fileContent, vbCrLf)
    
    ' 指定された行を新しいテキストに書き換える
    If targetLine <= UBound(lines) + 1 Then
        lines(targetLine - 1) = newText
    Else
        MsgBox "指定された行はファイルの行数を超えています。"
        Exit Sub
    End If
    
    ' ファイルを開いて上書き保存する
    Set file = fso.OpenTextFile(filePath, 2)  ' 書き込みモード
    For i = LBound(lines) To UBound(lines)
        file.WriteLine lines(i)
    Next i
    file.Close
    
    MsgBox "指定された行が正常に書き換えられました。"
End Sub


Sub SetFieldRequiredToNo()
    Dim db As DAO.Database
    Dim tdf As DAO.TableDef
    Dim fld As DAO.Field
    
    ' 現在のデータベースを取得
    Set db = CurrentDb
    
    ' テーブル定義を取得（例：Table1）
    Set tdf = db.TableDefs("Table1")
    
    ' 対象のフィールド（例：Field1）の値要求を「いいえ」に設定
    Set fld = tdf.Fields("Field1")
    fld.Required = False  ' 値要求を「いいえ」に設定
    
    ' 変更を保存
    tdf.Fields.Refresh
    MsgBox "Field1 の値要求が「いいえ」に設定されました。"
End Sub


Sub SetAllFieldsRequiredToNo()
    Dim db As DAO.Database
    Dim tdf As DAO.TableDef
    Dim fld As DAO.Field
    
    ' 現在のデータベースを取得
    Set db = CurrentDb
    
    ' テーブル定義を取得（例：Table1）
    Set tdf = db.TableDefs("Table1")
    
    ' テーブル内のすべてのフィールドをループ
    For Each fld In tdf.Fields
        ' フィールドの「値要求」を「いいえ」に設定
        fld.Required = False
    Next fld
    
    ' 変更を保存
    tdf.Fields.Refresh
    MsgBox "すべてのフィールドの値要求が「いいえ」に設定されました。"
End Sub

Sub ExportQueryToCSV()
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim fso As Object
    Dim txtFile As Object
    Dim filePath As String
    Dim i As Integer
    Dim line As String
    
    ' 出力ファイルのパス
    filePath = "C:\YourFolder\exported_query.csv"
    
    ' データベースとクエリの結果セットを開く
    Set db = CurrentDb
    Set rs = db.OpenRecordset("MyQuery", dbOpenSnapshot)
    
    ' ファイルシステムオブジェクトを作成
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set txtFile = fso.CreateTextFile(filePath, True)
    
    ' ヘッダー行を書き込み
    For i = 0 To rs.Fields.Count - 1
        line = line & rs.Fields(i).Name & ","
    Next i
    ' 最後のカンマを削除して改行
    line = Left(line, Len(line) - 1)
    txtFile.WriteLine line
    
    ' レコードを書き込み
    Do While Not rs.EOF
        line = ""
        For i = 0 To rs.Fields.Count - 1
            line = line & rs.Fields(i).Value & ","
        Next i
        line = Left(line, Len(line) - 1)
        txtFile.WriteLine line
        rs.MoveNext
    Loop
    
    ' リソースの解放
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    txtFile.Close
    Set txtFile = Nothing
    Set fso = Nothing
    
    MsgBox "クエリ結果がCSVファイルにエクスポートされました: " & filePath
End Sub



Sub ExportQueryToCSV_OutputTo()
    Dim filePath As String
    filePath = "C:\YourFolder\exported_query.csv" ' 出力ファイルのパス
    
    ' DoCmd.OutputToを使用してクエリをCSVファイルにエクスポート
    DoCmd.OutputTo acOutputQuery, "MyQuery", acFormatTXT, filePath, True
    
    MsgBox "クエリ結果がCSVファイルにエクスポートされました: " & filePath
End Sub

Sub ExportQueryToPDF()
    Dim filePath As String
    filePath = "C:\YourFolder\exported_query.pdf" ' 出力するPDFファイルのパス
    
    ' DoCmd.OutputToメソッドを使用してクエリをPDFにエクスポート
    DoCmd.OutputTo acOutputQuery, "MyQuery", acFormatPDF, filePath, True
    
    MsgBox "クエリ結果がPDFファイルにエクスポートされました: " & filePath
End Sub

Sub CreateQueryAndExportToPDF()
    Dim db As DAO.Database
    Dim qdf As DAO.QueryDef
    Dim sqlStr As String
    Dim filePath As String
    
    ' データベースオブジェクトの取得
    Set db = CurrentDb
    
    ' クエリのSQL文を作成 (必要に応じてSQL文を変更)
    sqlStr = "SELECT Field1, Field2, Field3 FROM YourTable WHERE SomeCondition = True"
    
    ' 既存のクエリがあれば削除
    On Error Resume Next
    db.QueryDefs.Delete "TempQuery"
    On Error GoTo 0
    
    ' クエリ定義を作成
    Set qdf = db.CreateQueryDef("TempQuery", sqlStr)
    
    ' PDFファイルの保存場所を指定
    filePath = "C:\YourFolder\query_output.pdf"
    
    ' クエリをPDFにエクスポート
    DoCmd.OutputTo acOutputQuery, "TempQuery", acFormatPDF, filePath, True
    
    MsgBox "クエリ結果がPDFファイルにエクスポートされました: " & filePath
    
    ' リソースの解放
    Set qdf = Nothing
    Set db = Nothing
End Sub

Sub CreateQueryAndExportToPDF()
    Dim db As DAO.Database
    Dim qdf As DAO.QueryDef
    Dim sqlStr As String
    Dim filePath As String
    
    ' データベースオブジェクトの取得
    Set db = CurrentDb
    
    ' クエリのSQL文を作成 (必要に応じてSQL文を変更)
    sqlStr = "SELECT Field1, Field2, Field3 FROM YourTable WHERE SomeCondition = True"
    
    ' 既存のクエリがあれば削除
    On Error Resume Next
    db.QueryDefs.Delete "TempQuery"
    On Error GoTo 0
    
    ' クエリ定義を作成
    Set qdf = db.CreateQueryDef("TempQuery", sqlStr)
    
    ' PDFファイルの保存場所を指定
    filePath = "C:\YourFolder\query_output.pdf"
    
    ' クエリをPDFにエクスポート
    DoCmd.OutputTo acOutputQuery, "TempQuery", acFormatPDF, filePath, True
    
    MsgBox "クエリ結果がPDFファイルにエクスポートされました: " & filePath
    
    ' リソースの解放
    Set qdf = Nothing
    Set db = Nothing
End Sub




Sub ExportQueryToCSV_TransferText()
    Dim filePath As String
    filePath = "C:\YourFolder\exported_query.csv" ' 出力ファイルのパス
    
    ' DoCmd.TransferTextを使用してクエリをCSVファイルにエクスポート
    DoCmd.TransferText acExportDelim, , "MyQuery", filePath, True
    
    MsgBox "クエリ結果がCSVファイルにエクスポートされました: " & filePath
End Sub


Sub ExportAndDeleteIni()
    Dim filePath As String
    Dim fso As Object
    Dim iniFilePath As String
    
    ' CSVファイルの保存場所を指定
    filePath = "C:\YourFolder\exported_query.csv"
    
    ' DoCmd.TransferTextメソッドでクエリをCSVにエクスポート
    DoCmd.TransferText acExportDelim, , "MyQuery", filePath, True
    
    ' export.iniファイルのパス
    iniFilePath = "C:\YourFolder\export.ini"
    
    ' ファイルシステムオブジェクトを使ってexport.iniを削除
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' export.iniが存在する場合に削除
    If fso.FileExists(iniFilePath) Then
        fso.DeleteFile iniFilePath
    End If
    
    MsgBox "クエリ結果がCSVファイルにエクスポートされ、export.iniファイルは削除されました。"
    
    ' リソースの解放
    Set fso = Nothing
End Sub


Sub DeleteAllFilesInFolder()
    Dim fso As Object
    Dim folderPath As String
    Dim folder As Object
    Dim file As Object
    
    ' 削除したいフォルダーのパスを指定
    folderPath = "C:\YourFolder\"
    
    ' FileSystemObjectを作成
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' フォルダーが存在するか確認
    If fso.FolderExists(folderPath) Then
        ' フォルダー内のすべてのファイルを取得
        Set folder = fso.GetFolder(folderPath)
        
        ' フォルダー内の各ファイルを削除
        For Each file In folder.Files
            file.Delete
        Next file
        
        MsgBox "フォルダー内のすべてのファイルが削除されました: " & folderPath
    Else
        MsgBox "指定されたフォルダーは存在しません: " & folderPath
    End If
    
    ' リソースの解放
    Set folder = Nothing
    Set fso = Nothing
End Sub




Sub ConcatenateAllFields()
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim fld As DAO.Field
    Dim sql As String
    Dim tableName As String
    Dim concatenatedFields As String
    
    tableName = "Table1" ' テーブル名を指定
    concatenatedFields = ""

    ' データベースを取得
    Set db = CurrentDb
    
    ' テーブルのフィールド名を取得
    Set rs = db.OpenRecordset(tableName)
    
    ' フィールドをすべて連結
    For Each fld In rs.Fields
        If concatenatedFields <> "" Then
            concatenatedFields = concatenatedFields & " & ', ' & "
        End If
        concatenatedFields = concatenatedFields & "[" & fld.Name & "]"
    Next fld
    
    ' SQL文を作成
    sql = "SELECT " & concatenatedFields & " AS ConcatenatedFields FROM " & tableName & ";"
    
    ' SQL文を出力（または実行）
    Debug.Print sql
    ' DoCmd.RunSQL sql ' 実行する場合
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
End Sub



Dim db As DAO.Database
Dim rs As DAO.Recordset
Dim sql As String

sql = "SELECT Table1.ItemID, Table1.OtherField1, Table2.OtherField2 " & _
      "FROM Table1 " & _
      "INNER JOIN Table2 ON Table1.ItemID = Table2.ItemID;"

Set db = CurrentDb
Set rs = db.OpenRecordset(sql)

' 結果を操作するコード
Do While Not rs.EOF
    Debug.Print rs!ItemID & ", " & rs!OtherField1 & ", " & rs!OtherField2
    rs.MoveNext
Loop

rs.Close
Set rs = Nothing
Set db = Nothing




Sub GetFieldCount()
    Dim db As DAO.Database
    Dim tdf As DAO.TableDef
    Dim fldCount As Integer
    
    ' 現在のデータベースを取得
    Set db = CurrentDb
    
    ' テーブルの TableDef オブジェクトを取得 (例: "MyTable" がテーブル名)
    Set tdf = db.TableDefs("MyTable")
    
    ' テーブルのフィールド数を取得
    fldCount = tdf.Fields.Count
    
    ' 結果を表示
    MsgBox "フィールドの数: " & fldCount
End Sub

Sub ConcatenateAllFields()
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim fld As DAO.Field
    Dim sql As String
    Dim tableName As String
    Dim concatenatedFields As String
    
    tableName = "Table1" ' テーブル名を指定
    concatenatedFields = ""

    ' データベースを取得
    Set db = CurrentDb
    
    ' テーブルのフィールド名を取得
    Set rs = db.OpenRecordset(tableName)
    
    ' フィールドをすべて連結
    For Each fld In rs.Fields
        If concatenatedFields <> "" Then
            concatenatedFields = concatenatedFields & " & ', ' & "
        End If
        concatenatedFields = concatenatedFields & "Nz([" & fld.Name & "], '')"
    Next fld
    
    ' SQL文を作成
    sql = "SELECT " & concatenatedFields & " AS ConcatenatedFields FROM " & tableName & ";"
    
    ' SQL文を出力（または実行）
    Debug.Print sql
    ' DoCmd.RunSQL sql ' 実行する場合
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
End Sub



Sub CompareAllFieldsInTables()
    Dim db As DAO.Database
    Dim rsA As DAO.Recordset
    Dim rsB As DAO.Recordset
    Dim fld As DAO.Field
    Dim sqlA As String
    Dim sqlB As String
    Dim matchFound As Boolean
    Dim i As Integer
    Dim diffCount As Integer

    Set db = CurrentDb
    
    ' テーブルAから全てのレコードを取得
    sqlA = "SELECT * FROM テーブルA"
    Set rsA = db.OpenRecordset(sqlA)
    
    ' テーブルBのレコードをIDで検索
    Do While Not rsA.EOF
        sqlB = "SELECT * FROM テーブルB WHERE ID = " & rsA!ID
        Set rsB = db.OpenRecordset(sqlB)
        
        If Not rsB.EOF Then
            matchFound = True
            diffCount = 0
            
            ' すべてのフィールドをループして比較
            For i = 0 To rsA.Fields.Count - 1
                Set fld = rsA.Fields(i)
                
                ' IDフィールドはスキップ（すでに一致で検索しているため）
                If fld.Name <> "ID" Then
                    If rsA.Fields(i).Value <> rsB.Fields(i).Value Then
                        Debug.Print "ID " & rsA!ID & " の " & fld.Name & " が異なります: " & rsA.Fields(i).Value & " vs " & rsB.Fields(i).Value
                        matchFound = False
                        diffCount = diffCount + 1
                    End If
                End If
            Next i
            
            If matchFound Then
                Debug.Print "ID " & rsA!ID & " のレコードは全て一致します。"
            Else
                Debug.Print "ID " & rsA!ID & " のレコードは " & diffCount & " 個のフィールドが異なります。"
            End If
        Else
            Debug.Print "ID " & rsA!ID & " はテーブルBに存在しません。"
        End If
        
        rsA.MoveNext
    Loop
    
    ' クリーンアップ
    rsA.Close
    rsB.Close
    Set rsA = Nothing
    Set rsB = Nothing
    Set db = Nothing
End Sub


Function ConvertSecondsToTime(seconds As Long) As String
    Dim hours As Long
    Dim minutes As Long
    Dim secs As Long
    
    ' 時間、分、秒を計算
    hours = seconds \ 3600
    minutes = (seconds Mod 3600) \ 60
    secs = seconds Mod 60
    
    ' 結果をフォーマットして返す
    ConvertSecondsToTime = Format(hours, "00") & ":" & Format(minutes, "00") & ":" & Format(secs, "00")
End Function



Dim myDict As Object
Set myDict = CreateObject("Scripting.Dictionary")

' アイテムの追加
myDict.Add "Fruit1", "Apple"
myDict.Add "Fruit2", "Banana"
myDict.Add "Fruit3", "Cherry"

' Dictionaryの内容をループで表示
Dim key As Variant
For Each key In myDict.Keys
    Debug.Print key & ": " & myDict(key)
Next key



Sub CreateTableInAccessWithErrorHandling()
    On Error GoTo ErrorHandler
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field

    ' 現在のデータベースを開く
    Set db = CurrentDb
    
    ' 新しいテーブルを作成
    Set tbl = db.CreateTableDef("MyNewTable")
    
    ' フィールドをテーブルに追加
    Set fld = tbl.CreateField("ID", dbLong)
    tbl.Fields.Append fld
    
    Set fld = tbl.CreateField("Name", dbText, 50)
    tbl.Fields.Append fld
    
    Set fld = tbl.CreateField("BirthDate", dbDate)
    tbl.Fields.Append fld
    
    ' テーブルをデータベースに追加
    db.TableDefs.Append tbl
    
    MsgBox "テーブルが作成されました!"
    
    ' オブジェクトの解放
    Set fld = Nothing
    Set tbl = Nothing
    Set db = Nothing
    Exit Sub
    
ErrorHandler:
    MsgBox "エラーが発生しました: " & Err.Description
End Sub

Sub ExportTableToExcelUsingTransferSpreadsheet()
    Dim strPath As String
    strPath = "C:\path\to\your\file.xlsx" ' エクスポートするファイルのパスを指定
    
    ' AccessテーブルをExcelにエクスポート
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, "TableName", strPath, True
End Sub




' FileSystemObject を使ってフォルダ内のファイル名を取得するスクリプト

Dim folderPath
folderPath = "C:\Your\Folder\Path" ' フォルダのパスを指定

Dim fso, folder, file
Set fso = CreateObject("Scripting.FileSystemObject")
Set folder = fso.GetFolder(folderPath)

' ファイルを列挙する
For Each file In folder.Files
    WScript.Echo file.Name
Next

' オブジェクトを解放
Set folder = Nothing
Set fso = Nothing


' Access ファイルからテーブル名を取得するスクリプト

Dim accessApp, dbPath, db
dbPath = "C:\Your\Access\Database.accdb" ' Access データベースのパスを指定

' Access アプリケーションオブジェクトを作成
Set accessApp = CreateObject("Access.Application")

' データベースを開く
accessApp.OpenCurrentDatabase dbPath

' データベースのテーブルコレクションにアクセス
Set db = accessApp.CurrentDb

Dim tableDef
For Each tableDef In db.TableDefs
    ' システムテーブルは除外 (MSys で始まるテーブルはシステムテーブル)
    If Left(tableDef.Name, 4) <> "MSys" Then
        WScript.Echo tableDef.Name
    End If
Next

' Access アプリケーションを閉じる
accessApp.CloseCurrentDatabase
accessApp.Quit

' オブジェクトの解放
Set db = Nothing
Set accessApp = Nothing


Sub ExportTableDefinitionsToExcel()
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field
    Dim excelApp As Object
    Dim workbook As Object
    Dim worksheet As Object
    Dim row As Integer
    Dim filePath As String
    
    ' Excelアプリケーションのインスタンスを作成
    Set excelApp = CreateObject("Excel.Application")
    excelApp.Visible = True
    
    ' 新しいワークブックを作成
    Set workbook = excelApp.Workbooks.Add
    
    ' 現在のデータベースを取得
    Set db = CurrentDb
    
    ' テーブルをループ
    For Each tbl In db.TableDefs
        ' システムテーブルを除外するための条件
        If Left(tbl.Name, 4) <> "MSys" Then
            ' 新しいワークシートを作成
            Set worksheet = workbook.Sheets.Add
            worksheet.Name = tbl.Name
            
            ' ヘッダ行を書き込み
            worksheet.Cells(1, 1).Value = "Field Name"
            worksheet.Cells(1, 2).Value = "Data Type"
            worksheet.Cells(1, 3).Value = "Field Size"
            
            ' 行インデックスの初期化
            row = 2
            
            ' テーブルのフィールドをループ
            For Each fld In tbl.Fields
                worksheet.Cells(row, 1).Value = fld.Name
                worksheet.Cells(row, 2).Value = FieldTypeName(fld.Type)
                worksheet.Cells(row, 3).Value = fld.Size
                row = row + 1
            Next fld
        End If
    Next tbl
    
    ' ファイルパスを設定し、Excelファイルを保存
    filePath = Application.CurrentProject.Path & "\TableDefinitions.xlsx"
    workbook.SaveAs filePath
    
    ' クリーンアップ
    workbook.Close
    excelApp.Quit
    Set workbook = Nothing
    Set excelApp = Nothing
    Set fld = Nothing
    Set tbl = Nothing
    Set db = Nothing
    
    MsgBox "テーブル定義がエクセルファイルにエクスポートされました: " & filePath
End Sub

' データ型を名前に変換する関数
Function FieldTypeName(typeCode As Integer) As String
    Select Case typeCode
        Case dbBoolean
            FieldTypeName = "Boolean"
        Case dbByte
            FieldTypeName = "Byte"
        Case dbInteger
            FieldTypeName = "Integer"
        Case dbLong
            FieldTypeName = "Long"
        Case dbCurrency
            FieldTypeName = "Currency"
        Case dbSingle
            FieldTypeName = "Single"
        Case dbDouble
            FieldTypeName = "Double"
        Case dbDate
            FieldTypeName = "Date/Time"
        Case dbText
            FieldTypeName = "Text"
        Case dbMemo
            FieldTypeName = "Memo"
        Case dbGUID
            FieldTypeName = "GUID"
        Case dbBinary
            FieldTypeName = "Binary"
        Case dbLongBinary
            FieldTypeName = "OLE Object"
        Case dbVarBinary
            FieldTypeName = "VarBinary"
        Case dbBigInt
            FieldTypeName = "BigInt"
        Case dbNumeric
            FieldTypeName = "Numeric"
        Case Else
            FieldTypeName = "Unknown"
    End Select
End Function




Sub ExportAllAccessTableDefinitionsToExcel()
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field
    Dim idx As DAO.Index
    Dim excelApp As Object
    Dim workbook As Object
    Dim worksheet As Object
    Dim row As Integer
    Dim folderPath As String
    Dim filePath As String
    Dim fieldRequired As Boolean
    Dim fieldIndexed As Boolean
    Dim isPrimaryKey As Boolean
    
    ' エクスポート先のExcelアプリケーションのインスタンスを作成
    Set excelApp = CreateObject("Excel.Application")
    excelApp.Visible = True
    Set workbook = excelApp.Workbooks.Add
    
    ' フォルダパスを設定
    folderPath = "C:\指定フォルダパス" ' ここを変更してください
    
    ' ファイルシステムオブジェクト(FSO)を使ってフォルダ内のファイルを取得
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set folder = fso.GetFolder(folderPath)
    
    ' フォルダ内のすべてのファイルをループ
    For Each file In folder.Files
        ' Accessファイル（.accdb または .mdb）かどうか確認
        If LCase(fso.GetExtensionName(file.Name)) = "accdb" Or LCase(fso.GetExtensionName(file.Name)) = "mdb" Then
            ' 各ファイルのフルパス
            filePath = folderPath & "\" & file.Name
            
            ' Accessファイルを開く
            Set db = DBEngine.OpenDatabase(filePath)
            
            ' テーブルをループ
            For Each tbl In db.TableDefs
                ' システムテーブルを除外するための条件
                If Left(tbl.Name, 4) <> "MSys" Then
                    ' 新しいワークシートを作成
                    Set worksheet = workbook.Sheets.Add
                    worksheet.Name = tbl.Name & "_" & file.Name
                    
                    ' ヘッダ行を書き込み
                    worksheet.Cells(1, 1).Value = "Field Name"
                    worksheet.Cells(1, 2).Value = "Data Type"
                    worksheet.Cells(1, 3).Value = "Field Size"
                    worksheet.Cells(1, 4).Value = "Required"
                    worksheet.Cells(1, 5).Value = "Indexed"
                    worksheet.Cells(1, 6).Value = "Primary Key"
                    
                    ' 行インデックスの初期化
                    row = 2
                    
                    ' テーブルのフィールドをループ
                    For Each fld In tbl.Fields
                        ' フィールド名、データ型、フィールドサイズを書き込み
                        worksheet.Cells(row, 1).Value = fld.Name
                        worksheet.Cells(row, 2).Value = FieldTypeName(fld.Type)
                        worksheet.Cells(row, 3).Value = fld.Size
                        
                        ' 必須フィールドかどうか
                        fieldRequired = fld.Required
                        worksheet.Cells(row, 4).Value = IIf(fieldRequired, "Yes", "No")
                        
                        ' インデックスの有無とプライマリキーのチェック
                        fieldIndexed = False
                        isPrimaryKey = False
                        For Each idx In tbl.Indexes
                            If idx.Fields(0).Name = fld.Name Then
                                fieldIndexed = True
                                If idx.Primary Then
                                    isPrimaryKey = True
                                End If
                            End If
                        Next idx
                        worksheet.Cells(row, 5).Value = IIf(fieldIndexed, "Yes", "No")
                        worksheet.Cells(row, 6).Value = IIf(isPrimaryKey, "Yes", "No")
                        
                        ' 行を次に移動
                        row = row + 1
                    Next fld
                End If
            Next tbl
            
            ' Accessデータベースを閉じる
            db.Close
            Set db = Nothing
        End If
    Next file
    
    ' Excelファイルの保存
    filePath = folderPath & "\AllTableDefinitions.xlsx"
    workbook.SaveAs filePath
    
    ' クリーンアップ
    workbook.Close
    excelApp.Quit
    Set workbook = Nothing
    Set excelApp = Nothing
    Set fld = Nothing
    Set tbl = Nothing
    Set fso = Nothing
    Set folder = Nothing
    
    MsgBox "すべてのAccessファイルのテーブル定義がエクスポートされました: " & filePath
End Sub

' データ型を名前に変換する関数
Function FieldTypeName(typeCode As Integer) As String
    Select Case typeCode
        Case dbBoolean
            FieldTypeName = "Boolean"
        Case dbByte
            FieldTypeName = "Byte"
        Case dbInteger
            FieldTypeName = "Integer"
        Case dbLong
            FieldTypeName = "Long"
        Case dbCurrency
            FieldTypeName = "Currency"
        Case dbSingle
            FieldTypeName = "Single"
        Case dbDouble
            FieldTypeName = "Double"
        Case dbDate
            FieldTypeName = "Date/Time"
        Case dbText
            FieldTypeName = "Text"
        Case dbMemo
            FieldTypeName = "Memo"
        Case dbGUID
            FieldTypeName = "GUID"
        Case dbBinary
            FieldTypeName = "Binary"
        Case dbLongBinary
            FieldTypeName = "OLE Object"
        Case dbVarBinary
            FieldTypeName = "VarBinary"
        Case dbBigInt
            FieldTypeName = "BigInt"
        Case dbNumeric
            FieldTypeName = "Numeric"
        Case Else
            FieldTypeName = "Unknown"
    End Select
End Function


Sub ExportAllPrimaryKeysToExcel()
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim idx As DAO.Index
    Dim fld As DAO.Field
    Dim excelApp As Object
    Dim workbook As Object
    Dim worksheet As Object
    Dim row As Integer
    Dim folderPath As String
    Dim filePath As String
    
    ' エクスポート先のExcelアプリケーションのインスタンスを作成
    Set excelApp = CreateObject("Excel.Application")
    excelApp.Visible = True
    Set workbook = excelApp.Workbooks.Add
    
    ' 新しいワークシートを作成
    Set worksheet = workbook.Sheets.Add
    worksheet.Name = "PrimaryKeys"
    
    ' ヘッダ行を書き込み
    worksheet.Cells(1, 1).Value = "File Name"
    worksheet.Cells(1, 2).Value = "Table Name"
    worksheet.Cells(1, 3).Value = "Primary Key Field"
    
    ' 行インデックスの初期化
    row = 2
    
    ' フォルダパスを設定
    folderPath = "C:\指定フォルダパス" ' ここを指定するフォルダパスに変更してください
    
    ' ファイルシステムオブジェクト(FSO)を使ってフォルダ内のファイルを取得
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set folder = fso.GetFolder(folderPath)
    
    ' フォルダ内のすべてのファイルをループ
    For Each file In folder.Files
        ' Accessファイル（.accdb または .mdb）かどうか確認
        If LCase(fso.GetExtensionName(file.Name)) = "accdb" Or LCase(fso.GetExtensionName(file.Name)) = "mdb" Then
            ' 各ファイルのフルパス
            filePath = folderPath & "\" & file.Name
            
            ' Accessファイルを開く
            Set db = DBEngine.OpenDatabase(filePath)
            
            ' テーブルをループ
            For Each tbl In db.TableDefs
                ' システムテーブルを除外するための条件
                If Left(tbl.Name, 4) <> "MSys" Then
                    ' インデックスをループしてプライマリキーを確認
                    For Each idx In tbl.Indexes
                        If idx.Primary Then
                            ' プライマリキーのフィールド名をループしてExcelに出力
                            For Each fld In idx.Fields
                                worksheet.Cells(row, 1).Value = file.Name
                                worksheet.Cells(row, 2).Value = tbl.Name
                                worksheet.Cells(row, 3).Value = fld.Name
                                row = row + 1
                            Next fld
                        End If
                    Next idx
                End If
            Next tbl
            
            ' Accessデータベースを閉じる
            db.Close
            Set db = Nothing
        End If
    Next file
    
    ' Excelファイルの保存
    filePath = folderPath & "\PrimaryKeysList.xlsx"
    workbook.SaveAs filePath
    
    ' クリーンアップ
    workbook.Close
    excelApp.Quit
    Set workbook = Nothing
    Set excelApp = Nothing
    Set fld = Nothing
    Set tbl = Nothing
    Set fso = Nothing
    Set folder = Nothing
    
    MsgBox "すべてのプライマリキーの項目がエクスポートされました: " & filePath
End Sub




Sub ExportAllAccessTableDefinitionsToExcel()
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field
    Dim idx As DAO.Index
    Dim excelApp As Object
    Dim workbook As Object
    Dim worksheet As Object
    Dim row As Integer
    Dim folderPath As String
    Dim filePath As String
    Dim fieldRequired As Boolean
    Dim fieldIndexed As Boolean
    Dim isPrimaryKey As Boolean
    
    ' エクスポート先のExcelアプリケーションのインスタンスを作成
    Set excelApp = CreateObject("Excel.Application")
    excelApp.Visible = True
    Set workbook = excelApp.Workbooks.Add
    
    ' フォルダパスを設定
    folderPath = "C:\指定フォルダパス" ' ここを変更してください
    
    ' ファイルシステムオブジェクト(FSO)を使ってフォルダ内のファイルを取得
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set folder = fso.GetFolder(folderPath)
    
    ' フォルダ内のすべてのファイルをループ
    For Each file In folder.Files
        ' Accessファイル（.accdb または .mdb）かどうか確認
        If LCase(fso.GetExtensionName(file.Name)) = "accdb" Or LCase(fso.GetExtensionName(file.Name)) = "mdb" Then
            ' 各ファイルのフルパス
            filePath = folderPath & "\" & file.Name
            
            ' Accessファイルを開く
            Set db = DBEngine.OpenDatabase(filePath)
            
            ' テーブルをループ
            For Each tbl In db.TableDefs
                ' システムテーブルを除外するための条件
                If Left(tbl.Name, 4) <> "MSys" Then
                    ' 新しいワークシートを作成
                    Set worksheet = workbook.Sheets.Add
                    worksheet.Name = tbl.Name & "_" & file.Name
                    
                    ' ヘッダ行を書き込み
                    worksheet.Cells(1, 1).Value = "Field Name"
                    worksheet.Cells(1, 2).Value = "Data Type"
                    worksheet.Cells(1, 3).Value = "Field Size"
                    worksheet.Cells(1, 4).Value = "Required"
                    worksheet.Cells(1, 5).Value = "Indexed"
                    worksheet.Cells(1, 6).Value = "Primary Key"
                    
                    ' 行インデックスの初期化
                    row = 2
                    
                    ' テーブルのフィールドをループ
                    For Each fld In tbl.Fields
                        ' フィールド名、データ型、フィールドサイズを書き込み
                        worksheet.Cells(row, 1).Value = fld.Name
                        worksheet.Cells(row, 2).Value = FieldTypeName(fld.Type)
                        worksheet.Cells(row, 3).Value = fld.Size
                        
                        ' 必須フィールドかどうか
                        fieldRequired = fld.Required
                        worksheet.Cells(row, 4).Value = IIf(fieldRequired, "Yes", "No")
                        
                        ' インデックスの有無とプライマリキーのチェック
                        fieldIndexed = False
                        isPrimaryKey = False
                        
                        ' インデックスをループしてプライマリキーを確認
                        For Each idx In tbl.Indexes
                            If idx.Primary Then ' プライマリキーインデックスか確認
                                Dim i As Integer
                                For i = 0 To idx.Fields.Count - 1
                                    If idx.Fields(i).Name = fld.Name Then
                                        isPrimaryKey = True ' 該当フィールドがプライマリキー
                                    End If
                                Next i
                            End If
                        Next idx
                        
                        worksheet.Cells(row, 5).Value = IIf(fieldIndexed, "Yes", "No")
                        worksheet.Cells(row, 6).Value = IIf(isPrimaryKey, "Yes", "No")
                        
                        ' 行を次に移動
                        row = row + 1
                    Next fld
                End If
            Next tbl
            
            ' Accessデータベースを閉じる
            db.Close
            Set db = Nothing
        End If
    Next file
    
    ' Excelファイルの保存
    filePath = folderPath & "\AllTableDefinitionsWithPrimaryKey.xlsx"
    workbook.SaveAs filePath
    
    ' クリーンアップ
    workbook.Close
    excelApp.Quit
    Set workbook = Nothing
    Set excelApp = Nothing
    Set fld = Nothing
    Set tbl = Nothing
    Set fso = Nothing
    Set folder = Nothing
    
    MsgBox "すべてのAccessファイルのテーブル定義がエクスポートされました: " & filePath
End Sub

' データ型を名前に変換する関数
Function FieldTypeName(typeCode As Integer) As String
    Select Case typeCode
        Case dbBoolean
            FieldTypeName = "Boolean"
        Case dbByte
            FieldTypeName = "Byte"
        Case dbInteger
            FieldTypeName = "Integer"
        Case dbLong
            FieldTypeName = "Long"
        Case dbCurrency
            FieldTypeName = "Currency"
        Case dbSingle
            FieldTypeName = "Single"
        Case dbDouble
            FieldTypeName = "Double"
        Case dbDate
            FieldTypeName = "Date/Time"
        Case dbText
            FieldTypeName = "Text"
        Case dbMemo
            FieldTypeName = "Memo"
        Case dbGUID
            FieldTypeName = "GUID"
        Case dbBinary
            FieldTypeName = "Binary"
        Case dbLongBinary
            FieldTypeName = "OLE Object"
        Case dbVarBinary
            FieldTypeName = "VarBinary"
        Case dbBigInt
            FieldTypeName = "BigInt"
        Case dbNumeric
            FieldTypeName = "Numeric"
        Case Else
            FieldTypeName = "Unknown"
    End Select
End Function

Sub ExportAllTableAttributesToExcel()
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field
    Dim idx As DAO.Index
    Dim excelApp As Object
    Dim workbook As Object
    Dim worksheet As Object
    Dim row As Integer
    Dim folderPath As String
    Dim filePath As String
    Dim fieldRequired As Boolean
    Dim fieldIndexed As Boolean
    Dim isPrimaryKey As Boolean
    Dim fieldDescription As String
    Dim fieldDefaultValue As String
    Dim fieldValidationRule As String
    Dim fieldFormat As String
    
    ' エクスポート先のExcelアプリケーションのインスタンスを作成
    Set excelApp = CreateObject("Excel.Application")
    excelApp.Visible = True
    Set workbook = excelApp.Workbooks.Add
    
    ' フォルダパスを設定
    folderPath = "C:\指定フォルダパス" ' ここを指定するフォルダパスに変更してください
    
    ' ファイルシステムオブジェクト(FSO)を使ってフォルダ内のファイルを取得
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set folder = fso.GetFolder(folderPath)
    
    ' フォルダ内のすべてのファイルをループ
    For Each file In folder.Files
        ' Accessファイル（.accdb または .mdb）かどうか確認
        If LCase(fso.GetExtensionName(file.Name)) = "accdb" Or LCase(fso.GetExtensionName(file.Name)) = "mdb" Then
            ' 各ファイルのフルパス
            filePath = folderPath & "\" & file.Name
            
            ' Accessファイルを開く
            Set db = DBEngine.OpenDatabase(filePath)
            
            ' テーブルをループ
            For Each tbl In db.TableDefs
                ' システムテーブルを除外するための条件
                If Left(tbl.Name, 4) <> "MSys" Then
                    ' 新しいワークシートを作成
                    Set worksheet = workbook.Sheets.Add
                    worksheet.Name = tbl.Name & "_" & file.Name
                    
                    ' ヘッダ行を書き込み
                    worksheet.Cells(1, 1).Value = "Field Name"
                    worksheet.Cells(1, 2).Value = "Data Type"
                    worksheet.Cells(1, 3).Value = "Field Size"
                    worksheet.Cells(1, 4).Value = "Required"
                    worksheet.Cells(1, 5).Value = "Indexed"
                    worksheet.Cells(1, 6).Value = "Primary Key"
                    worksheet.Cells(1, 7).Value = "Description"
                    worksheet.Cells(1, 8).Value = "Default Value"
                    worksheet.Cells(1, 9).Value = "Validation Rule"
                    worksheet.Cells(1, 10).Value = "Format"
                    
                    ' 行インデックスの初期化
                    row = 2
                    
                    ' テーブルのフィールドをループ
                    For Each fld In tbl.Fields
                        ' フィールド名、データ型、フィールドサイズを書き込み
                        worksheet.Cells(row, 1).Value = fld.Name
                        worksheet.Cells(row, 2).Value = FieldTypeName(fld.Type)
                        worksheet.Cells(row, 3).Value = fld.Size
                        
                        ' 必須フィールドかどうか
                        fieldRequired = fld.Required
                        worksheet.Cells(row, 4).Value = IIf(fieldRequired, "Yes", "No")
                        
                        ' インデックスの有無とプライマリキーのチェック
                        fieldIndexed = False
                        isPrimaryKey = False
                        
                        ' インデックスをループしてプライマリキーを確認
                        For Each idx In tbl.Indexes
                            If idx.Primary Then ' プライマリキーインデックスか確認
                                Dim i As Integer
                                For i = 0 To idx.Fields.Count - 1
                                    If idx.Fields(i).Name = fld.Name Then
                                        isPrimaryKey = True ' 該当フィールドがプライマリキー
                                    End If
                                Next i
                            End If
                        Next idx
                        
                        worksheet.Cells(row, 5).Value = IIf(fieldIndexed, "Yes", "No")
                        worksheet.Cells(row, 6).Value = IIf(isPrimaryKey, "Yes", "No")
                        
                        ' フィールドの説明
                        On Error Resume Next
                        fieldDescription = fld.Properties("Description")
                        worksheet.Cells(row, 7).Value = fieldDescription
                        On Error GoTo 0
                        
                        ' フィールドの既定値
                        On Error Resume Next
                        fieldDefaultValue = fld.DefaultValue
                        worksheet.Cells(row, 8).Value = fieldDefaultValue
                        On Error GoTo 0
                        
                        ' フィールドの検証ルール
                        On Error Resume Next
                        fieldValidationRule = fld.ValidationRule
                        worksheet.Cells(row, 9).Value = fieldValidationRule
                        On Error GoTo 0
                        
                        ' フィールドのフォーマット
                        On Error Resume Next
                        fieldFormat = fld.Format
                        worksheet.Cells(row, 10).Value = fieldFormat
                        On Error GoTo 0
                        
                        ' 行を次に移動
                        row = row + 1
                    Next fld
                End If
            Next tbl
            
            ' Accessデータベースを閉じる
            db.Close
            Set db = Nothing
        End If
    Next file
    
    ' Excelファイルの保存
    filePath = folderPath & "\AllTableDefinitionsWithAttributes.xlsx"
    workbook.SaveAs filePath
    
    ' クリーンアップ
    workbook.Close
    excelApp.Quit
    Set workbook = Nothing
    Set excelApp = Nothing
    Set fld = Nothing
    Set tbl = Nothing
    Set fso = Nothing
    Set folder = Nothing
    
    MsgBox "すべてのAccessファイルのテーブル定義がエクスポートされました: " & filePath
End Sub

' データ型を名前に変換する関数
Function FieldTypeName(typeCode As Integer) As String
    Select Case typeCode
        Case dbBoolean
            FieldTypeName = "Boolean"
        Case dbByte
            FieldTypeName = "Byte"
        Case dbInteger
            FieldTypeName = "Integer"
        Case dbLong
            FieldTypeName = "Long"
        Case dbCurrency
            FieldTypeName = "Currency"
        Case dbSingle
            FieldTypeName = "Single"
        Case dbDouble
            FieldTypeName = "Double"
        Case dbDate
            FieldTypeName = "Date/Time"
        Case dbText
            FieldTypeName = "Text"
        Case dbMemo
            FieldTypeName = "Memo"
        Case dbGUID
            FieldTypeName = "GUID"
        Case dbBinary
            FieldTypeName = "Binary"
        Case dbLongBinary
            FieldTypeName = "OLE Object"
        Case dbVarBinary
            FieldTypeName = "VarBinary"
        Case dbBigInt
            FieldTypeName = "BigInt"
        Case dbNumeric
            FieldTypeName = "Numeric"
        Case Else
            FieldTypeName = "Unknown"
    End Select
End Function






Sub ExportTableDefinitionsToAccess()
    Dim fso As Object
    Dim folder As Object
    Dim file As Object
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim fld As DAO.Field
    Dim idx As DAO.Index
    Dim rs As DAO.Recordset
    Dim dbCurrent As DAO.Database
    Dim folderPath As String
    Dim filePath As String
    Dim fieldRequired As Boolean
    Dim fieldIndexed As Boolean
    Dim isPrimaryKey As Boolean
    Dim fieldDescription As String
    Dim fieldDefaultValue As String
    Dim fieldValidationRule As String
    Dim fieldFormat As String
    
    ' 現在のデータベース（保存先）を取得
    Set dbCurrent = CurrentDb
    
    ' 新しいテーブルを作成
    On Error Resume Next
    dbCurrent.Execute "DROP TABLE TableDefinitions" ' 既存のテーブルがあれば削除
    On Error GoTo 0
    
    dbCurrent.Execute "CREATE TABLE TableDefinitions (" & _
                      "FileName TEXT(255), " & _
                      "TableName TEXT(255), " & _
                      "FieldName TEXT(255), " & _
                      "DataType TEXT(50), " & _
                      "FieldSize LONG, " & _
                      "Required YESNO, " & _
                      "Indexed YESNO, " & _
                      "PrimaryKey YESNO, " & _
                      "Description TEXT(255), " & _
                      "DefaultValue TEXT(255), " & _
                      "ValidationRule TEXT(255), " & _
                      "Format TEXT(255))"
    
    ' テーブル定義情報を保存するためのレコードセットを開く
    Set rs = dbCurrent.OpenRecordset("TableDefinitions", dbOpenDynaset)
    
    ' フォルダパスを設定
    folderPath = "C:\指定フォルダパス" ' ここを指定するフォルダパスに変更してください
    
    ' ファイルシステムオブジェクト(FSO)を使ってフォルダ内のファイルを取得
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set folder = fso.GetFolder(folderPath)
    
    ' フォルダ内のすべてのファイルをループ
    For Each file In folder.Files
        ' Accessファイル（.accdb または .mdb）かどうか確認
        If LCase(fso.GetExtensionName(file.Name)) = "accdb" Or LCase(fso.GetExtensionName(file.Name)) = "mdb" Then
            ' 各ファイルのフルパス
            filePath = folderPath & "\" & file.Name
            
            ' Accessファイルを開く
            Set db = DBEngine.OpenDatabase(filePath)
            
            ' テーブルをループ
            For Each tbl In db.TableDefs
                ' システムテーブルを除外するための条件
                If Left(tbl.Name, 4) <> "MSys" Then
                    ' テーブルのフィールドをループ
                    For Each fld In tbl.Fields
                        ' フィールド属性を取得
                        fieldRequired = fld.Required
                        fieldDescription = ""
                        fieldDefaultValue = ""
                        fieldValidationRule = ""
                        fieldFormat = ""
                        
                        ' エラー回避のためのエラーハンドリング
                        On Error Resume Next
                        fieldDescription = fld.Properties("Description")
                        fieldDefaultValue = fld.DefaultValue
                        fieldValidationRule = fld.ValidationRule
                        fieldFormat = fld.Format
                        On Error GoTo 0
                        
                        ' インデックスとプライマリキーの確認
                        fieldIndexed = False
                        isPrimaryKey = False
                        
                        For Each idx In tbl.Indexes
                            If idx.Primary Then
                                Dim i As Integer
                                For i = 0 To idx.Fields.Count - 1
                                    If idx.Fields(i).Name = fld.Name Then
                                        isPrimaryKey = True
                                    End If
                                Next i
                            End If
                        Next idx
                        
                        ' レコードを追加
                        rs.AddNew
                        rs!FileName = file.Name
                        rs!TableName = tbl.Name
                        rs!FieldName = fld.Name
                        rs!DataType = FieldTypeName(fld.Type)
                        rs!FieldSize = fld.Size
                        rs!Required = fieldRequired
                        rs!Indexed = fieldIndexed
                        rs!PrimaryKey = isPrimaryKey
                        rs!Description = fieldDescription
                        rs!DefaultValue = fieldDefaultValue
                        rs!ValidationRule = fieldValidationRule
                        rs!Format = fieldFormat
                        rs.Update
                    Next fld
                End If
            Next tbl
            
            ' Accessデータベースを閉じる
            db.Close
            Set db = Nothing
        End If
    Next file
    
    ' クリーンアップ
    rs.Close
    Set rs = Nothing
    Set dbCurrent = Nothing
    Set fso = Nothing
    Set folder = Nothing
    
    MsgBox "すべてのAccessファイルのテーブル定義がAccessに保存されました。"
End Sub

' データ型を名前に変換する関数
Function FieldTypeName(typeCode As Integer) As String
    Select Case typeCode
        Case dbBoolean
            FieldTypeName = "Boolean"
        Case dbByte
            FieldTypeName = "Byte"
        Case dbInteger
            FieldTypeName = "Integer"
        Case dbLong
            FieldTypeName = "Long"
        Case dbCurrency
            FieldTypeName = "Currency"
        Case dbSingle
            FieldTypeName = "Single"
        Case dbDouble
            FieldTypeName = "Double"
        Case dbDate
            FieldTypeName = "Date/Time"
        Case dbText
            FieldTypeName = "Text"
        Case dbMemo
            FieldTypeName = "Memo"
        Case dbGUID
            FieldTypeName = "GUID"
        Case dbBinary
            FieldTypeName = "Binary"
        Case dbLongBinary
            FieldTypeName = "OLE Object"
        Case dbVarBinary
            FieldTypeName = "VarBinary"
        Case dbBigInt
            FieldTypeName = "BigInt"
        Case dbNumeric
            FieldTypeName = "Numeric"
        Case Else
            FieldTypeName = "Unknown"
    End Select
End Function

機密度ラベルのVBAでの直接適用は難しい
VBAだけで機密度ラベルを適用することは現在のところ難しいですが、Microsoftの他のツールやAPI、Power Automateなどを組み合わせることで、ある程度の自動化や保護が可能です。

Sub ExportTableUsingTransferSpreadsheet()
    Dim strExcelPath As String
    strExcelPath = "C:\Users\YourUsername\Documents\ExportedData.xlsx"  ' エクスポート先のパス

    ' DoCmd.TransferSpreadsheetを使用して、テーブルをExcelにエクスポート
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, "YourTableName", strExcelPath, True

    MsgBox "テーブルがExcelにエクスポートされました！", vbInformation
End Sub


「秘密度ラベル選択画面を回避する」要件は、一般的にOffice製品（Word、Excel、Outlookなど）や他の情報保護システムで使われている「秘密度ラベル」機能に関連している可能性があります。この機能は、Microsoft Information Protection（MIP）や他の情報保護ツールによって提供され、データのセキュリティとコンプライアンスを強化するために使用されます。

特定のドキュメントやメールに秘密度ラベルを自動的に適用したり、選択を促すポップアップを無効にしたりするための方法について説明します。

1. 自動ラベル適用ルールの構成
管理者がラベルの適用を自動化するルールを設定することで、ユーザーが手動でラベルを選択する必要がなくなります。Microsoft 365の情報保護機能や、他のセキュリティ管理コンソールで以下のような設定を行います。

ポリシーの自動化: 特定の条件に応じて（例えば、ファイルに機密情報が含まれている場合）、自動的に秘密度ラベルを適用するルールを設定します。これにより、ユーザーにポップアップが表示されることを避けられます。
管理者設定: 管理者権限がある場合、Microsoft 365の「情報保護」センターで秘密度ラベルの設定を見直し、手動選択を回避できるようにします。
2. ラベル適用の無効化（ユーザー側で回避）
ユーザーが秘密度ラベルの選択画面を回避するためには、以下のアプローチを取ることができます。

ラベルなしのドキュメント作成: 新しいドキュメントやメール作成時にラベルを適用しないオプションがある場合、それを選択してラベル適用をスキップすることができます。
オートラベルポップアップの無効化（管理者による設定）: ラベルを強制的に選ばせるポップアップが表示されないようにするには、管理者がOfficeアプリケーションのポリシー設定でポップアップを無効化することが可能です。
Outlookでの手動ラベル設定の無効化
Outlookなどで秘密度ラベル選択を促すメッセージが頻繁に表示される場合は、Outlookのオプション設定でラベル適用を無効にすることができます。具体的には、以下の操作を行います。

Outlookを開く
ファイル -> オプション -> メール を選択
情報保護 セクションで、ラベルの選択を無効にするオプションがあればオフにします（企業や管理者によって設定されている場合、個々のユーザーは変更できないことがあります）。
3. Officeアドインの無効化
もし秘密度ラベルの選択画面がOfficeのアドイン機能によって表示されている場合は、そのアドインを無効化することも選択肢の一つです。以下の手順でアドインを無効にできます。

Officeアプリを開く（Word、Excel、Outlookなど）
ファイル -> オプション -> アドイン
管理 ボタンを押し、表示されたアドイン一覧で該当するセキュリティやラベル関連のアドインを無効化
4. グループポリシーを使用した制御（IT管理者向け）
企業内で秘密度ラベルを自動で設定しつつ、手動のラベル選択をユーザーに強制したくない場合、グループポリシー（GPO）を使ってポリシーを制御できます。

Microsoft 365情報保護: 管理者がGPOを使用して、Officeアプリケーションでラベル選択画面の表示を管理します。これにより、ユーザーが手動でラベルを選択するプロセスを省略できる場合があります。
